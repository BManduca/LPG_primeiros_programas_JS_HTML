<a> -> tag chamada âncora, que é representada pela letra a.
 - através do atributo href, pode ser indicado o endereço que será acessado e este atributo
 se encontra declarado dentro da tag

 é utilizado tags HTML de âncora para criar links na web, a palavra ou frase 
 que é declarada dentro do atributo presente na tag <a>, sempre aparecerá em destaque.

 o HTML é estático, por isso para vermos diferenças ou alterações no código, 
 precisamos alterar salvar e recarregar o navegador.

 um linguagem que é dinâmica e pode ser utilizado lado a lado com HTML e que realmente é 
 uma linguagem de programação é o JavaScript, porém, para toda alteração feita em 
 JS, é preciso colocar toda essa parte que pertence ao JS dentro da tag <script></script>

Para criar um alerta em JS, é so colocarmos dentro da tag como comentado a cima, a seguinte
intrução alert("");, com o texto que será apresentado em tela.
 Ao reiniciar o navegador, aparecerá o pop-up com a mensagem declarada.

 para(se caso ocorrer o erro com acentuação), pode ser corrigido, conforme a seguinte 
 tag composta com atributo charset: <meta charset="UTF-8">



 HTML sendo uma linguagem estática, não é uma linguagem de programação propriamente 
 dita, inclusive HTML significa Hyper Text Markup Language, como podemos ver, 
 não há a presença da palavra programming. 
 O HTML foi criado apenas para apresentar informações, ou seja, sem dinamismo.

Exemplo:

<h1>Sejam bem vindos</h1>
<br>
Seria isso um programa?

e se por algum acaso, fosse decidido efetuar cálculos que variam de acordo com a entrada 
do usuário?
Não será possível, pois, o HTML irá no máximo ser responsável em exibir o resultado 
do cálculo, mas não irá realizá-lo nem nada...somente mostrar


Porém, o navegador não conhece somente a a linguagem HTML, conhece além disso...
conhece outra que é totalmente dinâmica, que é a JavaScript, através dela 
poderemos realizar cálculos e diversas operações úteis. 

Apartir de agora, usaremos as duas linguagens lado a lado, o JavaScripte o HTML, 
para criar programas muito interessantes.

assim, como a língua portuguesa, possuí regras, toda linguagem de programação também as possui 
e isso não é diferente com o JavaScript, se deixarmos de seguir essas regras ou a sintaxe a risca, 
o código corre o risco de não funcionar.

A função alert é capaz de exibir um popup na tela do navegador, inclusive a mesma é capaz
de receber um texto que será exibido no popup. É importante saber que no JavaScript, existe 
a distinção entre letras maiúsculas e minúsculas, portanto, ao escrever alert ou ALERT, 
terá uma diferença sim e o comando não será reconhecido e o interpretador acusará 
erro de sintaxe.
Texto em JS sempre vem entre "", isso foi definido pelos criadores da linguagem e o termo 
na verdade para texto em JavaScript é string.


Aprendemos a utilizar o alert, porém, para ficar exibindo um texto para o usuário via 
alert, não é algo tão indicado...tornando a experiência com o usuário bem ruim.
Se caso, o usuário quiser ler somente a última linha, não conseguirá, porque surgirão muitos
alerts seguidos.

O que pode ser feito?
No mundo JS, tudo que está inserido dentro de <script>, será interpretado pela linguagem.
O mundo HTML ẽ compreendido como tudo que está fora da tag <script>.
apartir do mundo JS, escreveremos HTML. Para isto, adicionaremos document.write();

documento -> documento
Nossa página HTML, nosso programa, é um documento.
write -> escrever
Como podemos ver o write recebe parenteses no final, significa que o write pode receber parâmetros, ou 
seja, ela aceita receber algo para escrever no documento e também podemos lembrar que o texto
no JS é incluido entre aspas.

O texto como ja vimos também, é chamado de string, tanto em JS como em muitas outras linguagens.


o document.write() aceita tanto string quanto numerais, onde é possível também fazer operações dentro
do mesmo.

operações dentro do JS envolvendo numerais, resulta em um numeral, porém, operações como soma
envolvendo strings, resulta na concatenação das strings

ao tentar fazer uma operação por exemplo de soma, entre uma string e um numeral, vai resultar 
na concatenação dos dois, pois o JS vai converter por debaixo dos panos o numeral para uma string.


para realizar um calculo de média por exemplo, 
podemos utilizar da seguinte forma:
document.write(" Média = " + (20+10+30)/3);

que o JS, vai resolver primeiramente e interpretar a 
conta como uma string e concatenar com a palavra Média.


o interpretador sempre vai analisar se primeiramente existe algum parenteses, que precisa ser estudado 
ou resolvido, após, essa análise, o interpretador, fará o estudo geral sempre da esquerda para a direita.

e se caso eu quisesse, fazer a seguinte situação de imprimir o ano de nascimento de 3 pessoas aleátorias....
podemos ver que no final de cada write, existe uma quebra de linha.

document.write("Flávio nasceu em" + (2016 - 39) + "<br>");
document.write("Joaquim nasceu em" + (2016 - 20) + "<br>");
document.write("Barney nasceu em" + (2016 - 40) + "<br>");


na matemática operações de divisão e multiplicação são realizadas primeiro. O 
mesmo ocorre no universo da programação e esse fenômeno denomina-se Procedência entre operadores.

sendo assim, no exemplo do professor, seria feito primeiro a divisão entre 400 e 4
e depois a soma com os outros valores, resultando assim em uma média errada.


Em nosso programa, conseguimos este efeito de guardar um valor, por meio da criação
de variáveis. Como o próprio some sugere, elas variam e são representadas da seguinte forma:

var ano;

Para definir um valor para a variável ano, usamos o =, que significa receber nesta linguagem, 
e podemos inserir qualquer valor dentro desta variavel.

como por exemplo: 

var ano = 1992;
assim, poderemos utilizar a variavel ano em vários locais do nosso código, sem 
precisar ficar repetindo ou copiando e colando um valor 

Quando o JS se depara com a variavel ano, ele somente a interpretará como uma string
se estiver em aspas ("ano"), como não é o caso, será verificado se não é um número, não 
se tratando de um numeral, o JS determinará se é uma variável, anterioremente escrevemos 
var ano, desta forma, ela passa a existir e quando o valor for computado, a palavra ano 
será trocado pelo valor armazenado na variável.

A parte interessante de trabalhar com variaveis, é que ao declararmos as mesmas em um 
único ponto, várias intruções podem depender de uma mesma variável e, quando alternamos 
seu valor, isso é refletido em todos os pontos do código onde aparece.

o navegador processa  a tag <script> linha a linha, na ordem em que foram declaradas. Na primeira, 
teremos a informação de que a variável ano recebe o valor 1992, desta forma, o código irã assumir 
na parte de texto, o valor definido na variavel.

Uma variável pode guardar exatamente ou praticamente o que você quiser: seja número, string ou outro 
pedaço de código, sabemos também que é possível calcular a média de idades usando a frase 
"A média das frases é " e concatenar com a soma das idades dividida pelo número de indivíduos.

podemos também chegar na situação em que a média ou a conta que esteja resolvendo no momento possa resultar em 
uma dizíma períodica, como pro exemplo:

<meta charset="UTF-8">

<script>
    var ano = 2016;

    document.write("Flávio tem " + (ano - 1977) + " anos");
    document.write("<br>");
    document.write("Joaquim tem " + (ano - 1996) + " anos");
    document.write("<br");

    ano = 2017
    document.write("Barney tem " + (ano - 1976) + " anos");
    document.write("<br>");

    var media = (39 + 20 + 41)/3;

    document.write("A média das idades é: " + media);


</script>


ao salvar e ver o resultado no navegador apresentará uma dizíma períodica e para corrigir essa questão, 
usaremos da mesma forma como utilizamos o document.write() para apresentar o texto ou as strings no html via JS, 
utilizaremos a matemática, chamando o comando Math e a função round(), fará o arredondamento do valor resultado
hoje em média.

ficando assim:

var media = (39 + 20 + 41)/3;

document.write("A média das idades é: " + Math.round(media) + " anos");

aqui também, além de aprendermos a arredondar a média, podemos armazenar valores, para que possamos 
utilizar os mesmos em diversos lugares do nosso código.


<meta charset="UTF-8">

<script>
    var ano = 2016;
    var idadeflavio = (ano - 1977);
    var idadejoaquim = (ano - 1996);

    document.write("Flávio tem " + idadeflavio + " anos");
    document.write("<br>");
    document.write("Joaquim tem " + idadejoaquim + " anos");
    document.write("<br");

    ano = 2017
    var idadebarney = (ano - 1976);
    document.write("Barney tem " + idadebarney + " anos");
    document.write("<br>");

    var media = (idadeflavio + idadejoaquim + idadebarney)/3;

    document.write("A média das idades é: " + media);

</script>


sabemos que para efetuar o pulo de linha, basta inserir a tag <br> e no caso 
de ter que pular varias linhas ou efetuar várias quebras de linha...
pode fazer declarando da seguinte forma 

document.write("<br><br><br>");

colocando várias tags, porém, sempre vai ter que ficar alterando em vários locais do código, aonde
é preciso efetuar as quebras de linha.

ou pode ser efetuado também, criando uma váriavel:

var puloLinha = "<br>";
Assim, so altera em um local e será alterado no código inteiro.


para criar uma função, em vez de ficar escrevendo diversas vezes as mesmas funcionalidades, é necessário fazer o seguinte:

todas as funçoes que serão criadas precisam estar dentro da tag <script>, ou seja, serão declaradas no inicio do código.
declarando uma função através da palavra function, seguido de um nome para a mesma.

function nomeDaFuncao() {

}

por exemplo, função para calcular ou efetuar uma divisao:

<meta charset="UTF-8">

<input id="textinput" name="textinput" value="" type="text">
<button onclick="enviar()">Confirmar</button>

<script>


    var numerador;
    var denominador;
    var fracao = numerador / denominador;

    var aproximar = Math.round(fracao);

    function divisao(numerador,denominador) {
        document.write("A divisão entre " + numerador + " e " + denominador + " resulta em " + aproximar);
    }


</script>


neste meio que estamos estudando, caso algum trecho do código não é para ser interpretado, 
mas, também, não queremos apagar, podemos simplesmente colocar //, que irá deixar o trecho comentado


Aula 11(capitulo 5) - Interagindo com o usuário

neste mundo da programação, caso queira consultar ao usuário uma informação, 
existe a função prompt, onde passamos como parâmetro uma pergunta, umaa afirmação..algo que 
direcione o usuário a preencher o pop-up que aparecerá com alguma informação.

ex.: prompt("Qual sua altura?")


Aula 09 - Jogo da adivinhação (capitulo 6)

para gerar número aleátorios em JS temos a função Math.random(), porém,
mostará um número com muitas casas decimais.... O que podemos fazer é multiplicar por a função, ou seja,
 Math.random * 10 e após esse processo, podemos arredondar esse valor usando a função round().
 
Aula 08 - Manipulando array(capitulo 09)

Sabemos que para fazer um array fixo dentro do JS
é so fazer da seguinte forma: var segredos = [5,7,10,2];

porém, se quisermos que o mesmo array, gere e guarde números aleátorios dentro 
dele mesmo, pdoemos fazer da seguinte forma: 
var segredos = []
segredos.push(Math.round(Math.random() * 10));
